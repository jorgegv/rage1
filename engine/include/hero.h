////////////////////////////////////////////////////////////////////////////////
//
// RAGE1 - Retro Adventure Game Engine, release 1
// (c) Copyright 2020 Jorge Gonzalez Villalonga <jorgegv@daikon.es>
// 
// This code is ublished under a GNU GPL license version 3 or later.  See
// LICENSE file in the distribution for details.
// 
////////////////////////////////////////////////////////////////////////////////

#ifndef _HERO_H
#define _HERO_H

#include <input.h>
#include <games/sp1.h>
#include <stdint.h>
#include <string.h>

#include "sprite.h"
#include "controller.h"
#include "game_data.h"

// animation data for the hero sprite
// there are 4 animation sequences, for up, down, left and right movements
// They may point to the same frame sets, of course
struct hero_animation_data_s {
    uint8_t num_frames;		// number of frames on each frame sequence
    uint8_t **frames_up;		// frame sequences for all directions
    uint8_t **frames_down;
    uint8_t **frames_left;
    uint8_t **frames_right;
    uint8_t delay;		// frames are rotated every 'delay' calls
    uint8_t current_frame;	// current sprite frame
    uint8_t delay_counter;	// current frame delay counter
};

// movement data for the hero sprite
#define MOVE_NONE	0
#define MOVE_UP		IN_STICK_UP
#define MOVE_DOWN	IN_STICK_DOWN
#define MOVE_LEFT	IN_STICK_LEFT
#define MOVE_RIGHT	IN_STICK_RIGHT
#define MOVE_ALL	( MOVE_UP | MOVE_DOWN | MOVE_LEFT | MOVE_RIGHT )
struct hero_movement_data_s {
    uint8_t last_direction;
    uint8_t dx,dy;
};

struct hero_info_s {
    struct sp1_ss *sprite;                      // ptr to SP1 sprite struct
    uint8_t width,height;			// dimensions in pixels ( rows,cols * 8 )
    struct hero_animation_data_s animation;	// animation data	
    struct sprite_position_data_s position;	// position data
    struct hero_movement_data_s movement;	// movement data
    uint16_t flags;				// flags
    uint8_t num_lives;				// lives
    struct btile_s *lives_tile;			// btile used to draw remaining lives
};

// a pre-filled hero_info_s struct for game reset
// generated by datagen.pl in game_data.c
extern struct hero_info_s hero_startup_data;
extern struct sp1_ss *hero_sprite;

// hero flags macros and definitions
#define GET_HERO_FLAG(s,f)	( (s).flags & (f) )
#define SET_HERO_FLAG(s,f)	( (s).flags |= (f) )
#define RESET_HERO_FLAG(s,f)	( (s).flags &= ~(f) )

#define F_HERO_ALIVE	0x0001

#define IS_HERO_ALIVE(s)	(GET_HERO_FLAG((s),F_HERO_ALIVE))

void init_hero(void);
void hero_reset_all(void);
void hero_reset_position(void);
void hero_animate_and_move( void );
void hero_shoot_bullet( void );
void hero_pickup_items(void);
void hero_update_lives_display(void);
void hero_check_if_inside_hotzones(void);

#endif // _HERO_H
