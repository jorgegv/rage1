################################################################################
##
## RAGE1 - Retro Adventure Game Engine, release 1
## (c) Copyright 2020 Jorge Gonzalez Villalonga <jorgegv@daikon.es>
## 
## This code is ublished under a GNU GPL license version 3 or later.  See
## LICENSE file in the distribution for details.
## 
################################################################################

# directory configurations
ENGINE_DIR		= engine
BUILD_DIR		= build
GENERATED_DIR		= $(BUILD_DIR)/generated
GENERATED_DIR_DATASETS	= $(GENERATED_DIR)/datasets
GENERATED_DIR_CODESETS	= $(GENERATED_DIR)/codesets
GENERATED_DIR_LOWMEM	= $(GENERATED_DIR)/lowmem
GAME_SRC_DIR		= $(BUILD_DIR)/game_src
GAME_DATA_DIR		= $(BUILD_DIR)/game_data

# Main sources and objs
LOWMEM_CSRC		= $(wildcard $(ENGINE_DIR)/lowmem/*.c) $(wildcard $(GENERATED_DIR_LOWMEM)/*.c)
LOWMEM_ASMSRC		= $(wildcard $(ENGINE_DIR)/lowmem/*.asm) $(wildcard $(GENERATED_DIR_LOWMEM)/*.asm)
CSRC 			= $(wildcard $(ENGINE_DIR)/src/*.c) $(wildcard $(GAME_SRC_DIR)/*.c) $(wildcard $(GENERATED_DIR)/*.c)
ASMSRC			= $(wildcard $(ENGINE_DIR)/src/*.asm) $(wildcard $(GAME_SRC_DIR)/*.asm) $(wildcard $(GENERATED_DIR)/*.asm)
SRC			= $(LOWMEM_ASMSRC) $(LOWMEM_CSRC) $(CSRC) $(ASMSRC)
OBJS			= $(LOWMEM_CSRC:.c=.o) $(LOWMEM_ASMSRC:.asm=.o) $(CSRC:.c=.o) $(ASMSRC:.asm=.o)

# Dataset sources and binaries
CSRC_DATASETS		= $(wildcard $(GENERATED_DIR_DATASETS)/*.c)
SRC_DATASETS		= $(CSRC_DATASETS)
BIN_DATASETS		= $(CSRC_DATASETS:.c=.bin)
ZX0_DATASETS		= $(BIN_DATASETS:.bin=.zx0)
DATASET_MAXSIZE		= $(shell grep BUILD_MAX_DATASET_SIZE $(GENERATED_DIR)/game_data.h | awk '{print $$3}' )

# Codeset sources and binaries
CODESET_DIRS		= $(wildcard $(GENERATED_DIR_CODESETS)/codeset_*.src)
BIN_CODESETS		= $(CODESET_DIRS:.src=.bin)
CODESET_MAXSIZE		= 16384

# Banked code binary
BIN_BANKED_CODE		= $(ENGINE_DIR)/banked_code/banked_code.bin

# Bank binaries and taps
BANK_BINS_FILE		= $(GENERATED_DIR)/bank_bins.cfg
BANK_BINS		= $(shell cat $(BANK_BINS_FILE) 2>/dev/null )
BANK_TAPS		= $(BANK_BINS:.bin=.tap)

# Bank switcher routine for BASIC and tap
BSWITCH_SRC		= $(ENGINE_DIR)/bank/bswitch.asm
BSWITCH_BIN		= $(GENERATED_DIR)/bswitch.bin
BSWITCH_TAP		= $(BSWITCH_BIN:.bin=.tap)

# BASIC Loader and tap
BAS_LOADER		= $(GENERATED_DIR)/loader.bas
BAS_LOADER_TAP		= $(BAS_LOADER:.bas=.tap)

# Main binary and tap
MAIN_BIN		= main.bin
MAIN_TAP		= $(MAIN_BIN:.bin=.tap)

# Final game TAP
FINAL_TAP		= game.tap

# the default zx target matches the one in datagen.pl when no target is defined
ZX_TARGET		= $(shell grep -E 'ZX_TARGET.+(48|128)$$' game/game_data/game_config/*.gdata 2>/dev/null|head -1|awk '{print $$2}')

#######################################################################
# template files and directories needed for game creation and update
#######################################################################
#
# these are pure library files that will be overwritten when updating the library
# do not modify these in your game!
LIB_ENGINE_FILES	= engine tools Makefile* zpragma*.inc .gitignore env.sh
# these are game data directories that will be copied from the template when creating
# a new game, but will _not_ be overwritten when updating the library. These contain
# your game!
LIB_GAME_DATA_DIRS	= minimal_game/game_data minimal_game/game_src
# needed directories that will be created empty if they do not exist
LIB_ENGINE_EMPTY_DIRS	= build/generated tests
#######################################################################

# compiler and tools
ZCC			= zcc
ZX0			= z88dk-zx0
NM			= z88dk-z80nm

# compiler flags
INC			= -I$(ENGINE_DIR)/include -I$(GENERATED_DIR)
CFLAGS			= +zx -vn -SO3 --c-code-in-asm --list -s -m -compiler=sdcc -clib=sdcc_iy --max-allocs-per-node200000 -pragma-include $(ZPRAGMA_INC) $(INC)
CFLAGS_TO_ASM		= -a

# generic rules
%.o: %.c
	@echo Compiling $*.c ...
	@$(ZCC) $(CFLAGS) -c $*.c

%.o: %.asm
	@echo Assembling $*.asm ...
	@$(ZCC) $(CFLAGS) -c $*.asm

# rule for inspecting generated asm code - run 'make myfile.c.asm' to
# get the .c.asm assembler generated from C file, with C code as comments
%.c.asm: %.c
	@echo Generating ASM for $*.c ...
	@$(ZCC) $(CFLAGS) $(CFLAGS_TO_ASM) -c $*.c

# build targets
.PHONY: data all build clean clean-config data_depend build-data help

final: $(FINAL_TAP)

$(MAIN_BIN): $(OBJS)
	@echo "Bulding $(MAIN_BIN)...."
	$(ZCC) $(CFLAGS) $(INCLUDE) $(LIBDIR) $(LIBS) $(OBJS) -startup=31 -o $(MAIN_BIN)

##
## Generated source code targets
##

$(GENERATED_DIR)/game_data_home.c: $(GENERATED_DIR)/game_data.dep
	@$(MYMAKE) -s data

$(GENERATED_DIR_DATASETS)/game_data_banked.c: $(GENERATED_DIR)/game_data.dep
	@$(MYMAKE) -s data

$(GENERATED_DIR)/game_data.dep: data_depend

data:
	@./tools/datagen.pl -t $(ZX_TARGET) -c -d $(GENERATED_DIR) $(GAME_DATA_DIR)/{game_config,btiles,sprites,map,heroes,flow}/*.gdata

data_depend:
	@if [ ! -f $(GENERATED_DIR)/game_data.dep ]; then ls -1 $(GAME_DATA_DIR)/{game_config,btiles,sprites,map,heroes}/*.gdata | xargs -l stat -c '%n%Y' | sha256sum > $(GENERATED_DIR)/game_data.dep; fi
	@ls -1 $(GAME_DATA_DIR)/{game_config,btiles,sprites,map,heroes}/*.gdata | xargs -l stat -c '%n%Y' | sha256sum > /tmp/game_data.dep
	@if ( ! cmp -s $(GENERATED_DIR)/game_data.dep /tmp/game_data.dep ) then rm $(GENERATED_DIR)/game_data.dep; mv /tmp/game_data.dep $(GENERATED_DIR)/game_data.dep; fi

## Taps

taps: $(TAPS)

%.tap: %.bas
	@echo "Creating TAP $@..."
	@bas2tap -sLOADER -a10 -q $<

$(FINAL_TAP): $(TAPS)
	@echo "Building final TAP $(FINAL_TAP)..."
	@cat $(TAPS) > $(FINAL_TAP)
	@echo "Build completed SUCCESSFULLY"

## Main game

main: $(MAIN_BIN)

##
## Misc targets
##

show:
	@echo " Game Configuration: $(shell grep -E '^\s*NAME\s+' build/game_data/game_config/Game.gdata | head -1 | awk '{print $$2}' )"
	@echo "Build Configuration: $(ZX_TARGET)K"

##
## Run options
##

run:
	@fuse $(FUSE_RUN_OPTS) $(FINAL_TAP) --debugger-command ''

debug:
	@fuse $(FUSE_RUN_OPTS) $(FINAL_TAP) --debugger-command "$$(cat debug_script.cfg | ./tools/r1sym.pl -m main.map )"

runz:
	@../zesarux/src/zesarux $(FINAL_TAP)

##
## Tests
##

# target to build all tests
tests: test1 test2 beeptest

# individual tests

TEST1_OBJS=memory.o sp1engine.o map.o
test1: tests/test1.c $(TEST1_OBJS)
	$(ZCC) $(CFLAGS) $(INCLUDE) $(LIBDIR) $(LIBS) tests/test1.c $(TEST1_OBJS) -startup=31 -create-app -o test1.bin

TEST2_OBJS=beeper.o
test2: tests/test2.c $(TEST2_OBJS)
	$(ZCC) $(CFLAGS) $(INCLUDE) $(LIBDIR) $(LIBS) tests/test2.c $(TEST2_OBJS) -startup=31 -create-app -o test2.bin

BEEPTEST_OBJS=beeper.o
beeptest: tests/beeptest.c $(BEEPTEST_OBJS)
	$(ZCC) $(CFLAGS) $(INCLUDE) $(LIBDIR) $(LIBS) tests/beeptest.c $(BEEPTEST_OBJS) -startup=31 -create-app -o beeptest.bin

TEXTBOX_OBJS=$(OBJS)
textbox: tests/textbox.c $(TEXTBOX_OBJS)
	$(ZCC) $(CFLAGS) $(INCLUDE) $(LIBDIR) $(LIBS) tests/textbox.c $(TEXTBOX_OBJS) -startup=31 -create-app -o textbox.bin

##
## Update and sync targets for games using the library. See USAGE-OVERVIEW.md document
##

# create a minimal game using the library
new-game:
	@if [ -z "$(target)" ]; then echo "Usage: make new-game target=<game-directory>"; exit 1; fi
	@if [ -d "$(target)" ]; then echo "Existing game directory $(target) found, use 'make update-game' instead"; exit 2; fi
	@echo "Creating game directory $(target)..."
	@mkdir -p "$(target)/game"
	@echo -n "Syncing library and game template files... "
	@rsync -ap $(LIB_ENGINE_FILES) "$(target)"
	@rsync -ap $(LIB_GAME_DATA_DIRS) "$(target)/game"
	@for i in $(LIB_ENGINE_EMPTY_DIRS); do mkdir -p "$(target)/$$i"; done
	@echo "Done!"

# update the library for an existing game
update-game:
	@if [ -z "$(target)" ]; then echo "Usage: make update-game target=<game-directory>"; exit 1; fi
	@if [ ! -d "$(target)" ]; then echo "Game directory $(target) not found, use 'make new-game' instead"; exit 2; fi
	@echo -n "Syncing library and game template files... "
	@rsync -ap --delete $(LIB_ENGINE_FILES) "$(target)"
	@-for i in $(LIB_ENGINE_EMPTY_DIRS); do mkdir -p "$(target)/$$i"; done 2>/dev/null
	@echo "Done!"

# tools
mem:
	@echo ""; echo "MEMORY USAGE REPORT BY OBJECT FILE:"
	@./tools/r1size.sh
	@echo ""; echo "MEMORY USAGE REPORT BY BINARY SECTION:"
	@./tools/memmap.pl main.map

linecount: clean
	find . -type f |grep -v -E '^./.git'|xargs -l file|grep -E '(ASCII|Perl)'|cut -f1 -d:|xargs -l cat|wc -l

