################################################################################
##
## RAGE1 - Retro Adventure Game Engine, release 1
## (c) Copyright 2020 Jorge Gonzalez Villalonga <jorgegv@daikon.es>
## 
## This code is ublished under a GNU GPL license version 3 or later.  See
## LICENSE file in the distribution for details.
## 
################################################################################

MYMAKE			= $(MAKE) -f Makefile-128
ZPRAGMA_INC             = zpragma-128.inc

# All taps
TAPS			= $(BAS_LOADER_TAP) $(BSWITCH_TAP) $(BANK_TAPS) $(MAIN_TAP)

-include Makefile.common

build:
#	@$(MYMAKE) -s banked_code
	@$(MYMAKE) -s -j8 datasets
	@$(MYMAKE) -s -j8 codesets
	@$(MYMAKE) -s -j8 banks
	@$(MYMAKE) -s bank_switcher
	@$(MYMAKE) -s -j8 main
	@$(MYMAKE) -s -j8 taps
	@$(MYMAKE) -s final
	@$(MYMAKE) -s lowmemcheck

## Check that certain symbols are linked in low memory.  It is assumed that
## all symbols mentioned as "extern" in .h files will be accessed from
## outside their modules and should thus be in lowmem.  Also, some functions
## should be always placed in lowmem (bank switching, game_startup, etc.)

# all extern declarations in .h files
ENGINE_LOWMEM_SYMBOLS	= $(shell grep -r extern engine/include/rage1/ | grep -Po '[\w\[\]]+;$$' | tr -d '[];' )

# some critical initialization and memory management functions
ENGINE_LOWMEM_SYMBOLS	+= init_datasets init_codesets memory_switch_bank dataset_activate codeset_call_function

# all data generated in the home bank
GAME_LOWMEM_SYMBOLS	= $(shell $(NM) $(GENERATED_DIR)/game_data.o | sed '1,/  Symbols:/d' | awk '{print $$4}' )

# target for doing the real check
lowmemcheck:
	@./tools/lowmemsym.pl -m main.map $(ENGINE_LOWMEM_SYMBOLS) $(GAME_LOWMEM_SYMBOLS)

##
## Dataset compilation to standalone binaries org'ed at 0x5C00
##

datasets: $(ZX0_DATASETS)

dataset_%.bin: dataset_%.c
	@echo "Compiling DATASET $< ..."
	@$(ZCC) $(CFLAGS) --no-crt -o $@ $<
	@mv $(GENERATED_DIR_DATASETS)/$(shell basename $@ .bin)_code_compiler.bin $@
	@if [ $$( stat -c%s $@ ) -gt $(DATASET_MAXSIZE) ]; then echo "** ERROR: $$( basename $@ ) size is greater than $(DATASET_MAXSIZE) bytes"; exit 1; fi

dataset_%.zx0: dataset_%.bin
	@echo "Compressing DATASET $< ..."
	@$(ZX0) $< $@ >/dev/null 2>&1

##
## Codeset compilation to standalone binaries org'ed at 0xC000
##

codesets: $(BIN_CODESETS)

#codeset_%.bin: codeset_%.src/*.c codeset_%.src/*.asm
codeset_%.bin:
	@echo "Compiling CODESET $@ ..."
	@# the '.../*.{asm,c}' at the end of the next line is critical: asm files MUST be included before C ones!
	@$(ZCC) $(CFLAGS) --no-crt -o $@ $(GENERATED_DIR_CODESETS)/$(shell basename $@ .bin).src/*.{asm,c}
	@mv $(GENERATED_DIR_CODESETS)/$(shell basename $@ .bin)_code_compiler.bin $@
	@if [ $$( stat -c%s $@ ) -gt $(CODESET_MAXSIZE) ]; then echo "** ERROR: $$( basename $@ ) size is greater than $(CODESET_MAXSIZE) bytes"; exit 1; fi

##
## Banked code compilation to standalone binary at 0xC000
##

banked_code: $(BIN_BANKED_CODE)
$(BIN_BANKED_CODE):
	@echo "Compiling BANKED CODE..."
	@$(ZCC) $(CFLAGS) --no-crt -o $@ $(ENGINE_DIR)/banked_code/*.{asm,c}


## Banks

banks:
	@echo "Building Bank binaries, BASIC loader and Dataset map..."
	@./tools/banktool.pl -i $(GENERATED_DIR_DATASETS) -c $(GENERATED_DIR_CODESETS) -o $(GENERATED_DIR) -l $(GENERATED_DIR_LOWMEM)

bank_switcher: $(BSWITCH_BIN)

$(BSWITCH_BIN):
	@echo "Assembling bank switch routine..."
	@$(ZCC) $(CFLAGS) --list --no-crt $(BSWITCH_SRC) -o $(BSWITCH_BIN)

## Taps

taps: $(TAPS)

# we set org at 0xC000 for the banks
bank_%.tap: bank_%.bin
	@echo "Creating TAP $@..."
	@z88dk-appmake +zx --noloader --org 0xC000 -b $<

# we set org at 0x8184 for 128 mode, 0x5F00 for 48 mode
$(MAIN_TAP): $(MAIN_BIN)
	@echo "Creating TAP $@..."
	@z88dk-appmake +zx --noloader --org 0x8184 -b $<

# we set org at 0x8000 for bank switcher
$(BSWITCH_TAP): $(BSWITCH_BIN)
	@echo "Creating TAP $@..."
	@z88dk-appmake +zx --noloader --org 0x8000 -b $<

## Run options

FUSE_RUN_OPTS		= --machine 128
